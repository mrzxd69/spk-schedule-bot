import type { TBot } from "@bot/index";
import { scheduleStartGroup, scheduleStartTeacher } from "@bot/keyboards/buttons/start";
import { scheduleStartGroupData, scheduleStartTeacherData } from "@bot/keyboards/data/schedule";
import { selectLessons, selectLessonsTeacher } from "@postgresql/abstractions/select";
import { prisma } from "@src/database/postgresql/prisma";
import { getScheduleText } from "@src/shared/utils/schedule";
import { getDate } from "@src/shared/utils/time";

export default (bot: TBot) => {
    bot.callbackQuery(scheduleStartGroupData, async (ctx) => {
        const { group, tomorrow } = ctx.queryData;

        const lessons = await selectLessons(group, tomorrow);

        let text = await getScheduleText("", lessons, group, getDate(false));

        const isEmptyText = text.includes("b") ? "\n" + text : "\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç\n";

        await ctx.editText(`üéâ –ì—Ä—É–ø–ø–∞: <b>${group}</b>\nüóì –î–∞—Ç–∞: ${getDate(tomorrow ? true : false)}:${isEmptyText}\n‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞!`, {
            parse_mode: "HTML",
        });

        await ctx.editReplyMarkup(scheduleStartGroup(group, tomorrow));
    });

    bot.callbackQuery(scheduleStartTeacherData, async (ctx) => {
        const { teacher, tomorrow } = ctx.queryData;

        const lessons = await selectLessonsTeacher(teacher, tomorrow);

        let text = lessons
            .map((lesson) => `<b>‚Ä¢ ${lesson.count} –ø–∞—Ä–∞:</b>\n –ì—Ä—É–ø–ø–∞: ${lesson.group}\n –ö–∞–±–∏–Ω–µ—Ç: ${lesson.room}\n\n`)
            .join("");

        const registeredTeacher = await prisma.teachers.findFirst({
            where: {
                initials: {
                    startsWith: teacher
                },
            }
        })

        const isEmptyText = text.includes("–ø–∞—Ä–∞") ? "\n\n" + text : "\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç\n";

        await ctx.editText(`‚≠êÔ∏è <b>${registeredTeacher?.initials}</b>\n–î–∞—Ç–∞: ${getDate(tomorrow ? true : false)}:${isEmptyText}\n‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞!`, {
            parse_mode: "HTML",
            reply_markup: scheduleStartTeacher(teacher, tomorrow),
        });
    });
};
